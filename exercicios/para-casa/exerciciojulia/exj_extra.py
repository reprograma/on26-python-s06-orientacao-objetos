## ðŸ§  ExercÃ­cio de HeranÃ§a em Python: Sistema de Gerenciamento de FuncionÃ¡rios (ExercicÃ­o AvanÃ§ado Extra)

# VocÃª estÃ¡ encarregado de criar um sistema de gerenciamento de funcionÃ¡rios para uma empresa. 
# O sistema deve ser capaz de lidar com diferentes tipos de funcionÃ¡rios e calcular seus salÃ¡rios com 
# base em suas caracterÃ­sticas especÃ­ficas. 
# Para isso, vocÃª precisa implementar a hierarquia de classes apropriada usando heranÃ§a em Python.

# InstruÃ§Ãµes:

# Crie uma classe base chamada Funcionario com os seguintes atributos:
#  - nome: o nome do funcionÃ¡rio.
#  - salario: o salÃ¡rio base do funcionÃ¡rio (inicialmente definido como 0).

# A classe Funcionario deve ter um mÃ©todo chamado `calcular_pagamento()` que retorna o pagamento do
# funcionÃ¡rio. No entanto, este mÃ©todo deve ser definido como um mÃ©todo abstrato (utilizando `pass`) 
# uma vez que cada tipo de funcionÃ¡rio (temporÃ¡rio e integral) calcularÃ¡ o pagamento de maneira diferente.

# Crie uma classe chamada FuncionarioTemporario, que herda da classe Funcionario. 
# Esta classe deve ter os seguintes atributos adicionais:

# - salario_por_hora: o salÃ¡rio por hora do funcionÃ¡rio temporÃ¡rio.
# - horas_trabalhadas: o nÃºmero de horas trabalhadas pelo funcionÃ¡rio temporÃ¡rio.
# Na classe FuncionarioTemporario, implemente o mÃ©todo `calcular_pagamento()` para calcular o pagamento
# do funcionÃ¡rio temporÃ¡rio com base no salÃ¡rio por hora e nas horas trabalhadas.

# Crie uma classe chamada FuncionarioIntegral, que tambÃ©m herda da classe Funcionario. 
# Esta classe deve ter um atributo adicional:

# - salario_mensal: o salÃ¡rio mensal do funcionÃ¡rio integral.
# Na classe FuncionarioIntegral, implemente o mÃ©todo `calcular_pagamento()` para calcular o pagamento 
# do funcionÃ¡rio integral, que Ã© igual ao seu salÃ¡rio mensal.

# Crie instÃ¢ncias de FuncionarioTemporario e FuncionarioIntegral, atribuindo valores adequados aos 
# atributos de cada funcionÃ¡rio.

# Calcule e imprima o pagamento de cada funcionÃ¡rio usando o mÃ©todo `calcular_pagamento()`.


class Funcionario:
    def __init__(self, nome) -> None:
        self.nome = nome
        self.salario = 0.0
    
    def calcular_pagamento(self):
        pass    
        
class FuncionarioTemporario(Funcionario):
    def __init__(self, nome, salario_hora, horas_trab):
        super().__init__(nome)
        self.salario_hora = salario_hora
        self.horas_trab = horas_trab
        
    def calcular_pagamento(self):
        return self.salario_hora * self.horas_trab
    
class FuncionarioIntegral(Funcionario):
    def __init__(self, nome, salario_mensal):
        super().__init__(nome)   
        self.salario_mensal = salario_mensal
        
    def calcular_pagamento(self):
        return self.salario_mensal
    
    
salario_deb_temporaria = FuncionarioTemporario ("Debora", 30, 100)
salario_jow_integral = FuncionarioIntegral("Joao", 3000)
    
print(salario_deb_temporaria.calcular_pagamento())
print(salario_jow_integral.calcular_pagamento())

    
# feito em grupo com: Andreza, Igea, Louise, Thaysa, Maria de Fatima, Marcinha